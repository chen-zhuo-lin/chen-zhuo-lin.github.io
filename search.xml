<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>js作用域</title>
    <url>/2023/03/06/js%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="js作用域"><a href="#js作用域" class="headerlink" title="js作用域"></a>js作用域</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在ES6之前,JS作用域可以分为两种</span></span><br><span class="line"><span class="comment">// 1.全局作用域                 一个变量拥有全局的作用范围</span></span><br><span class="line"><span class="comment">// 2.局部作用域(函数作用域)      一个变量只能在函数内部使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 局部变量</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式全局变量</span></span><br><span class="line">    c = <span class="number">234</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// d:局部变量 e:隐式全局变量</span></span><br><span class="line">    <span class="keyword">var</span> d = e = <span class="number">888</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局和隐式的区别：隐式全局变量可以通过delete关键字删除，全局变量不可以</span></span><br><span class="line">a1 = <span class="number">300</span></span><br><span class="line"><span class="keyword">delete</span> a1</span><br></pre></td></tr></table></figure>



<h2 id="词法作用域-作用域链"><a href="#词法作用域-作用域链" class="headerlink" title="词法作用域 作用域链"></a>词法作用域 作用域链</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value);<span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> value = <span class="number">2</span></span><br><span class="line">        <span class="title function_">foo</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">bar</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 词法作用域和动态作用域的问题:</span></span><br><span class="line">    <span class="comment">// JS采用的是词法作用域:函数内部可以访问函数外部的信息(函数内部有就用自己的,函数内部没有就用外部的)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 作用域链：0代    1代     2代....</span></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    	函数内部在使用变量的时候，会首先看当前函数有没有声明该变量，如果有声明，就优先使用自己声明的变量； </span></span><br><span class="line"><span class="comment">			如果没有声明，就会沿着作用域链向上去查找，直到找到为止</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">2</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> num = <span class="number">3</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 3</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">f2</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">f1</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变量声明了没有赋值，默认值就是undefined</span></span><br><span class="line">    <span class="comment">// 变量没有声明直接使用， 打印结果是 xx is not defined</span></span><br><span class="line">    <span class="keyword">var</span> kk;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(kk);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2023/03/06/test/</url>
    <content><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1>]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
</search>
